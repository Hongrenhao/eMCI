function[net] = makeobjFun(Out,Parm)
net = Parm.net;
%analyzeNetwork(net)
net.Layers(1)
inputSize = net.Layers(1).InputSize;
lgraph = layerGraph(net);
[learnableLayer,classLayer] = findLayersToReplace(lgraph);

numClasses = numel(categories(Out.YTrain));

if isa(learnableLayer,'nnet.cnn.layer.FullyConnectedLayer')
    newLearnableLayer = fullyConnectedLayer(numClasses, ...
        'Name','new_fc', ...
        'WeightLearnRateFactor',10, ...
        'BiasLearnRateFactor',10);
    
elseif isa(learnableLayer,'nnet.cnn.layer.Convolution2DLayer')
    newLearnableLayer = convolution2dLayer(1,numClasses, ...
        'Name','new_conv', ...
        'WeightLearnRateFactor',10, ...
        'BiasLearnRateFactor',10);
end

lgraph = replaceLayer(lgraph,learnableLayer.Name,newLearnableLayer);

newClassLayer = classificationLayer('Name','new_classoutput');
lgraph = replaceLayer(lgraph,classLayer.Name,newClassLayer);
layers = lgraph.Layers;
connections = lgraph.Connections;

layers(1:4) = freezeWeights(layers(1:4));
lgraph = createLgraphUsingConnections(layers,connections);
[~,~,l,~] = size(Out.XTrain);
if l ==1
Out.XValidation = cat(3,Out.XValidation,Out.XValidation,Out.XValidation);
Out.XTrain = cat(3,Out.XTrain,Out.XTrain,Out.XTrain);
end

augimdsValidation = augmentedImageDatastore(inputSize(1:2),Out.XValidation,Out.YValidation);
augimdsTrain = augmentedImageDatastore(inputSize(1:2),Out.XTrain,Out.YTrain);

miniBatchSize = Parm.miniBatchSize;
valFrequency = floor(size(Out.XTrain,4)/miniBatchSize);

if strcmp(Parm.solver,'sgdm')==1
   options = trainingOptions('sgdm', ...
            'InitialLearnRate',Parm.InitialLearnRate,...
            'Momentum',Parm.Momentum,...
            'ExecutionEnvironment',Parm.ExecutionEnvironment,...
            'MiniBatchSize',miniBatchSize, ...
            'L2Regularization',Parm.L2Regularization,...
            'MaxEpochs',Parm.MaxEpochs, ...
            'Shuffle','every-epoch', ...
            'ValidationData',augimdsValidation, ...
            'ValidationFrequency',20, ...
            'Verbose',false, ...
            'Plots',Parm.trainingPlot);    
else
   if strcmp(Parm.solver,'adam')==1
   options = trainingOptions('adam', ...
  'ExecutionEnvironment',Parm.ExecutionEnvironment, ...
    'MaxEpochs',10, ...
    'MiniBatchSize',miniBatchSize, ...
    'ValidationData',augimdsValidation, ...
    'ValidationFrequency',20, ...
    'GradientThreshold',1, ...
    'Verbose',false, ...
    'Plots','training-progress');
    end
end
net = trainNetwork(augimdsTrain,lgraph,options);

